<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Neva Programming Language</title>
    <link>https://nevalang.org/docs/tutorial/</link>
    <description>Recent content in Tutorial on Neva Programming Language</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://nevalang.org/docs/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Program That Does Nothing</title>
      <link>https://nevalang.org/docs/tutorial/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nevalang.org/docs/tutorial/01/</guid>
      <description>Here is the smallest program in Nevalang that compiles. It absolutely does nothing, but by looking at it, you can learn a lot about Nevalang.&#xA;component Main(start any) (stop any) { net { :start -&amp;gt; :stop } } Let&amp;rsquo;s break down what&amp;rsquo;s written here.&#xA;A Nevalang program consists of components that send messages to each other through ports but ports cannot be connected randomly. Each port has its own data type, and when we connect one port to another, the compiler checks if they are compatible.</description>
    </item>
    <item>
      <title>Echo</title>
      <link>https://nevalang.org/docs/tutorial/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nevalang.org/docs/tutorial/02/</guid>
      <description>Module and Manifest If you&amp;rsquo;ve gone through the quick start, you should have already created your first project. In that case, simply update the code in main.neva to include the Echo component from this example. For everyone else, let&amp;rsquo;s execute the following command:&#xA;neva new test With these command, we&amp;rsquo;re creating a module. We&amp;rsquo;ll learn more about modules later, but for now, remember that any Nevalang program consists of at least one module.</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>https://nevalang.org/docs/tutorial/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nevalang.org/docs/tutorial/03/</guid>
      <description>Isn&amp;rsquo;t it odd to reach the &amp;ldquo;Hello, World!&amp;rdquo; moment only in the third lesson - the starting point that most tutorials begin with? Well, many peculiarities await us in Nevalang. However, we hope that by the end of this tutorial, they will no longer seem like oddities. Who knows, you might even start thinking, &amp;ldquo;Could it have been any other way?&amp;rdquo;. Of course, we could have started with &amp;ldquo;Hello, World!&amp;rdquo; too, without delving into the intricate details of how every little thing works, but our goal, once again, is to achieve a deep understanding of how Nevalang is structured.</description>
    </item>
    <item>
      <title>Better Hello World</title>
      <link>https://nevalang.org/docs/tutorial/04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nevalang.org/docs/tutorial/04/</guid>
      <description>Const Senders We promised that &amp;ldquo;hello world&amp;rdquo; could be simplified. After all, if writing such a basic program is so complex, what does real programming look like? Fear not, our promise will be fulfilled. Let&amp;rsquo;s start simplifying immediately, beginning with eliminating the explicit mention of the emitter.&#xA;We remove the emitter node along with its directive:&#xA;#bind(greeting) emitter Emitter&amp;lt;string&amp;gt; Then we modify this connection:&#xA;emitter:msg -&amp;gt; blocker:data This way:&#xA;$greeting -&amp;gt; blocker:data Voil√†, our program is now two lines shorter:</description>
    </item>
    <item>
      <title>To be continued...</title>
      <link>https://nevalang.org/docs/tutorial/05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nevalang.org/docs/tutorial/05/</guid>
      <description>Unfortunately documentation isn&amp;rsquo;t finished. We haven&amp;rsquo;t cover a lot of stuff including interfaces and dependency injection, array ports and streams, error handling, working with structures and enums and a lot more.&#xA;Please refer to examples in the Nevalang&amp;rsquo;s git repository. Meanwile we will continue to improve documentation.&#xA;As always, PRs are welcome. Also feel free to ask questions in the community.</description>
    </item>
  </channel>
</rss>
